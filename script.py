# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EnmOfDlcAecXRj5LsmwwhzX6okINQMqW
"""

import seaborn as sns
import matplotlib.pyplot as plt
import streamlit as st



class Agent():
  def __init__(self, prev=None, next=None):
    self.prev = prev
    self.next = next


class Factory(Agent):
  def __init__(self, prev=None):
    super().__init__(prev=prev)

  def turn(self, from_prev):
    return from_prev

class Consumer(Agent):
  def __init__(self, next=None):
    super().__init__(next=next)
    self.orders = [4] * 12 + [9] + [5] * 39
    self.received = []
  
  def play(self):
    for order in self.orders:
      self.received.append(self.next.turn(order))
    return self.received


class Player(Agent):
  def __init__(self, prev=None, next=None, panic=0.2, name='Anonymous'):
    super().__init__(prev, next)
    self.name = name
    self.panic = panic
    self.balance = []
    self.stock = 16
    self.deficit = 0
    self.stock_log = []
    self.deficit_log = []

  def __repr__(self):
    return self.name

    
  def turn(self, from_prev):
    to_ship = from_prev + self.deficit  # Надо отгрузить
    if to_ship > self.stock: # Если не хватает - дефицит
      self.deficit = to_ship - self.stock
      to_ship = self.stock
    else:
      self.deficit = 0
    self.deficit_log.append(self.deficit)
    self.stock = self.stock - to_ship  # Запасы
    self.stock_log.append(self.stock)
    # print(self, to_ship)
    self.balance.append(2 * self.deficit + self.stock)
    
    # Заказываем больше нужного
    to_next = int(from_prev * self.panic)
    if to_next > self.stock:
      self.stock = self.stock + self.next.turn(to_next - self.stock)
    else:
      self.next.turn(0)  
    
    # print(self, to_ship)
    return to_ship

panic_levels = {
    'Петя': 1.5,
    'Коля': 1.5,
    'Таня': 1.5,
    'Света': 1.5,
}
chain = [Player(panic=panic_level, name=name) for name, panic_level in panic_levels.items()]
consumer = Consumer(next=chain[0])
factory = Factory(prev=chain[3])
chain[0].prev = consumer
chain[0].next = chain[1]
chain[1].prev = chain[0]
chain[1].next = chain[2]
chain[2].prev = chain[1]
chain[2].next = chain[3]
chain[3].prev = chain[2]
chain[3].next = factory

consumer.play();

# for a in chain:
#   print(a)
#   print(a.stock_log)
#   print(a.deficit_log) 
#   print(a.balance)
#   print()

# consumer.received
st.write('# Beer Game')

fig, ax = plt.subplots()
x = range(len(consumer.orders))

for player in chain:
  ax = sns.lineplot(x=x, y=player.balance, label=player)

st.pyplot(fig)